//Brian Bentson Matt Sheehan
#ifndef dequeH
#define dequeH

 #include "dsexceptions.h"
        #include <iostream>       // For NULL
        using namespace std;


template <class T>
class Deque //using a single linklist
{
public:
  Deque(int s = 100); // Create a deque with an initial size of s
  void push(T &X); // Insert item on the front end of the deque.
  T pop(); // Remove the front item from the deque and return it.
  void inject(T &X); // Insert item X on the rear end of the deque.
  T eject(); // Remove the rear item from the deque and return it.
  T findKth(int pos); // Return item at the kth position from the front.

  private:
            struct ListNode
            {
                Object   element;
                ListNode *next;

                ListNode( const Object & theElement, ListNode * n = NULL )
                  : element( theElement ), next( n ) { }
            };

            ListNode *topOfStack;



}; // class Deque

#include "deque.cpp"

#endif
